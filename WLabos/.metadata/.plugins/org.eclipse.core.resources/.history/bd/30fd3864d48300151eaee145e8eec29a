package datamanagement.labo2.searching;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.Comparator;

import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
import org.apache.lucene.analysis.en.EnglishAnalyzer;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.misc.HighFreqTerms;
import org.apache.lucene.misc.TermStats;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

import datamanagement.labo1.indexing.Lab1Indexer;
import datamanagement.labo1.tuning.Similarity;

public class Main {
	
	public static void main(String[] args) {
		
		
	}
	
	public static void HighFreqQuestions(IndexReader reader)
	{
		try {
			TermStats[] authorStats = HighFreqTerms.getHighFreqTerms(reader, 10, Lab1Indexer.AUTHORFIELD, new Comparator<TermStats>() {
				
				@Override
				public int compare(TermStats o1, TermStats o2) {
					
					return o1.docFreq - o2.docFreq;
				}
			});
			
			System.out.println("Top des auteurs: ");
			for (TermStats termStats : authorStats) {
				System.out.println(termStats.termtext.utf8ToString() + " - nombre de publications: " + termStats.docFreq);
			}
			
			TermStats[] termsStats = HighFreqTerms.getHighFreqTerms(reader, 10, Lab1Indexer.TITLEFIELD, new Comparator<TermStats>() {
				
				@Override
				public int compare(TermStats o1, TermStats o2) {
					return (int) Math.ceil(o1.totalTermFreq - o2.totalTermFreq);
				}
			});
			
			System.out.println("Top des termes: ");
			for (TermStats termStats : termsStats) {
				System.out.println(termStats.termtext.utf8ToString() + " - fréquence: " + termStats.totalTermFreq);
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

}
